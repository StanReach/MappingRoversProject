// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package nl.vu.cs.s2.simbadtest;


import nl.vu.cs.s2.simbadtest.Coordinate;
import nl.vu.cs.s2.simbadtest.Environment;
import nl.vu.cs.s2.simbadtest.Singleton;
import nl.vu.cs.s2.simbadtest.roverFactory;
import simbad.sim.EnvironmentDescription;

import java.awt.image.BufferedImage;
import java.util.*;

import javax.vecmath.Point3d;
import javax.vecmath.Vector3d;

/************************************************************/
/**
 * 
 */
public class controlCentre {
	/**
	 * 
	 */
    protected EnvironmentDescription currentEnvironment;
	/**
	 * 
	 */
    protected int[][] map;
    /**
	 * 
	 */
	public static final int MAP_RESOLUTION = 1;
	/**
	 * 
	 */
	public static final String OBJECT = "object";
	/**
	 * 
	 */
	private Rover[] controlledMappingRovers = new MappingRover[10];
	private DataCollectionRover[] controlledDataRovers = new DataCollectionRover[10];
	/**
	 * 
	 */
	public BufferedImage[] imageSet = new BufferedImage[200];
	/**
	 * 
	 */
	private int positionOffSet;
	/**
	 * 
	 * 
	 */
	public roverFactory roverfactory = new roverFactory();
	/**
	 * 
	 */
	public Singleton singleton = new Singleton();

	/**
	 * 
	 * @param size 
	 */
	
	public int worldSize;
	
	controlCentre(int mapSize, EnvironmentDescription environment) {
		
		worldSize = mapSize;
		
		positionOffSet = (mapSize/2) * MAP_RESOLUTION;
		createMap(mapSize, mapSize);
		
		currentEnvironment = environment;
		Start();
	}

	private void createMappingRovers() {
		
		for (int i = 0; i < (worldSize/2); i++) {
			
			controlledMappingRovers[i] = roverFactory.getRover(1, this, currentEnvironment);
		}
	}
	
	private void createMap(int width, int length) {
		map = new int[width * MAP_RESOLUTION][length * MAP_RESOLUTION];
	}
	
	public void updateMap(Point3d coord, int property) {
		int mapPositionX = (int) ((coord.x * MAP_RESOLUTION) + positionOffSet);
		int mapPositionY = (int) ((coord.z * MAP_RESOLUTION) + positionOffSet);
		
		map[mapPositionX][mapPositionY] = property;
	}
	
	public void printMap() {
		System.out.println(Arrays.deepToString(map).replace("], ", "]\n").replace("[[", "[").replace("]]", "]"));
		System.out.println();
		System.out.println();
	}


	/**
	 * 
	 * @param roverID 
	 * @param instruc 
	 */

	public Path findPath(int roverNumber) {
		
		int subTargetX;
		int subTargetY;
		
		int direction = -1;
		
		Path path = new Path();
		
		int startingXCoord = mapCoordCoder(controlledDataRovers[roverNumber].getCoordinates().x);
		int startingYCoord = mapCoordCoder(controlledDataRovers[roverNumber].getCoordinates().z);
		
		int xCoord = 1;
		int yCoord = 1;
		
		for (int x = xCoord; x < (map[0].length - 1); x++) {
			
			if (direction == 1) {
				
				direction = -1;
			} else {
				
				direction = 1;
			}
			for (int y = yCoord; y < (map[0].length - 1) && y > 0; y = y + direction ) {
				
				yCoord = y;
				
				if (map[x][y] != 0) {
					int tempY = y;
					while (map[x][tempY] != 0) {
						
						tempY = tempY + direction;
					}
					
					subTargetX = x;
					subTargetY = tempY;
					
					y = y - direction;
					
					while (map[x][y + direction] != 0) {
						
						x = x - direction;
					}
					
					System.out.println(x + " " + y);
					path.addStep(mapCoordDecoder(x), mapCoordDecoder(y));
					
					System.out.println(x + " " + subTargetY);
					path.addStep(mapCoordDecoder(x), mapCoordDecoder(subTargetY));
					
					System.out.println("sub Target" + " " + subTargetX + " " + subTargetY);
					path.addStep(mapCoordDecoder(subTargetX), mapCoordDecoder(subTargetY));
					
					y = subTargetY;
					x = subTargetX;
					
				}
				
				System.out.println(x + " " + y);
				path.addStep(mapCoordDecoder(x), mapCoordDecoder(y));
			}
		}
		
		return path;
	}
	
	public void startDataRover() {
		
		Path thePath = findPath(0);
		
		for (int i = 0; i < 40; i++) {
			System.out.println(thePath.stepArray[i].x + " " + thePath.stepArray[i].z);
		}
		
		controlledDataRovers[0].currentMode = "GoToLocation";
		
		controlledDataRovers[0].mainPath = thePath;
	}
	
	
	private int mapCoordCoder(double coord) {
		
		coord = Math.round(coord);
		
		coord = coord * MAP_RESOLUTION;
		
		coord = coord + positionOffSet;
		
		return (int) coord;
	}
	
	private double mapCoordDecoder(int coord) {
		
		coord = coord - positionOffSet;
		
		coord = coord / MAP_RESOLUTION;
		
		return coord;
	}
	
	public void Start() {
		
		System.out.println("herro");
		
		createMappingRovers();
		
		createDataRovers();
	}
	

	/**
	 * 
	 */
	private void createDataRovers() {
		// TODO Auto-generated method stub
		for (int i = 0; i < (1); i++) {
			
			controlledDataRovers[i] = (DataCollectionRover) roverFactory.getRover(2, this, currentEnvironment);
		}
	}
};
